/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader;
	if (typeof define === 'function' && define.amd) {
		define('vendor/js.cookie',factory);
		registeredInModuleLoader = true;
	}
	if (typeof exports === 'object') {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function decode (s) {
		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	}

	function init (converter) {
		function api() {}

		function set (key, value, attributes) {
			if (typeof document === 'undefined') {
				return;
			}

			attributes = extend({
				path: '/'
			}, api.defaults, attributes);

			if (typeof attributes.expires === 'number') {
				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
			}

			// We're using "expires" because "max-age" is not supported by IE
			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

			try {
				var result = JSON.stringify(value);
				if (/^[\{\[]/.test(result)) {
					value = result;
				}
			} catch (e) {}

			value = converter.write ?
				converter.write(value, key) :
				encodeURIComponent(String(value))
					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

			key = encodeURIComponent(String(key))
				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
				.replace(/[\(\)]/g, escape);

			var stringifiedAttributes = '';
			for (var attributeName in attributes) {
				if (!attributes[attributeName]) {
					continue;
				}
				stringifiedAttributes += '; ' + attributeName;
				if (attributes[attributeName] === true) {
					continue;
				}

				// Considers RFC 6265 section 5.2:
				// ...
				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
				//     character:
				// Consume the characters of the unparsed-attributes up to,
				// not including, the first %x3B (";") character.
				// ...
				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
			}

			return (document.cookie = key + '=' + value + stringifiedAttributes);
		}

		function get (key, json) {
			if (typeof document === 'undefined') {
				return;
			}

			var jar = {};
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all.
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = decode(parts[0]);
					cookie = (converter.read || converter)(cookie, name) ||
						decode(cookie);

					if (json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					jar[name] = cookie;

					if (key === name) {
						break;
					}
				} catch (e) {}
			}

			return key ? jar[key] : jar;
		}

		api.set = set;
		api.get = function (key) {
			return get(key, false /* read as raw */);
		};
		api.getJSON = function (key) {
			return get(key, true /* read as json */);
		};
		api.remove = function (key, attributes) {
			set(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.defaults = {};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));

define('lang',['vendor/js.cookie'],function(Cookies) {
    'use strict';
    var lang_cookie = "";
    const LANGUAGE_KEY = 'django_language';
    const DEFAULT_LANGUAGE = "fr";
    var DEFAULT_PATH = {path: ""};
    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for(var i = 0; i <ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
    }

    function get_lang(){
      const current_lang = $('#current-lang').val();
      return current_lang;
    }
    function change_language(element){
        console.log("change language clicked");
        var form = $('#lang-form');
        var $el = $(element);
        if($el.hasClass('active')||$el.hasClass('selected')){
            return;
        }
        var name = $('input[name="language"]', form);
        lang_cookie = $el.data('value');
        name.val(lang_cookie);
        //Cookies.set(LANGUAGE_KEY, lang_cookie, DEFAULT_PATH);
        form.submit();
    }
    $('.js-lang').on('click', function(event){
        change_language(this);
    });
    console.log("lang.js installed");
    return {get_cookie: getCookie, get_lang: get_lang}
});
define('ajax_api',['lang'], function(Locale) {
    'use strict';
    /**
       * 
       * @param {*} options is a JSON defining the following data :
       * type - string
       * url - string
       * data - json
       * dataType - string
       * Example : 
       * type: 'POST',
         url : '/cart/add_to_cart/',
        data: {product_id: 102, quantity: 4},
        dataType: 'json'
  
        A future object is returned
    */

      function ajax_lang(options, debug){
        if(debug){
          console.debug("ajax_api options - ", options);
        }
        options.url = '/' + Locale.get_lang() + options.url;
        return new Promise(function(resolve, reject){
            $.ajax(options).done(resolve).fail(reject);
        });
      };

      function ajax(options, debug){
        if(debug){
          console.debug("ajax_api options - ", options);
        }
        return new Promise(function(resolve, reject){
            $.ajax(options).done(resolve).fail(reject);
        });
      };

      async function fetch_api(url='', init_option={}){
        const response = await fetch(url, init_option);
        return response.json();
      }

    return {'ajax_lang':ajax_lang, 'ajax' : ajax, 'fetch_api': fetch_api};
  });
define('accounts',['ajax_api','exports'], function(ajax_api, exports) {
    'use strict';
    var user = {};
    
    var user_available = false;
    var query_delay = 800;
    var scheduled_query = false;
    var $user_search_result = undefined;
    var $user_search_target = undefined;
    var $user_search_target_name = undefined;
    var callback;
    var query = "";
    var options = {
        url:'/api/current-user/',
        type: 'GET',
        data : {},
        dataType: 'json'
    };
    var search_options = {
        url:'/api/user-search/',
        type: 'GET',
        data : {'search': query},
        dataType: 'json'
    };

    function activate_editable_inputs(context){
        var $editable_inputs = $('input.js-editable', context);
        $editable_inputs.addClass('editable').prop('disabled', false);
    
    }
    
    function deactivate_editable_inputs(context){
        var $editable_inputs = $('input.js-editable', context);
        $editable_inputs.removeClass('editable').prop('disabled', true);;
    }


    function userSearch(options){

        ajax_api.ajax(options).then(function(response){
            $user_search_result.empty();
            response.forEach(function(user, index){
                var full_name = user.first_name + " " +  user.last_name;
                $('<li>').data('user-id', user.id).data('user-name', full_name).html(full_name + " [" + user.username + "]").
                on('click', function(event){
                    event.stopPropagation();
                    var user_id = $(this).data('user-id');
                    var user_name = $(this).data('user-name');
                    $user_search_target.val(user_id);
                    //$(".js-user-search").val(user_name);
                    $user_search_target_name.val(user_name);
                    $user_search_result.hide();
                    $user_search_result.empty();
                }).appendTo($user_search_result);
                $user_search_result.show();
            });
    
        }, function(error){
            console.log(error);
        });
    }

    function init(){
        $user_search_result = $('#user-search-result');
        $user_search_target = $($user_search_result.data('target'));
        $user_search_target_name = $($user_search_result.data('target-name'));
        var $editable_inputs = $('input.js-editable');
        $editable_inputs.removeClass('editable').prop('disabled', true);;
        $('#form-controls').hide();
        $('.js-edit-form').on('click', function(event){
            var ctx = $($(this).data('target'));
            $(this).addClass('disabled');
            activate_editable_inputs(ctx);
            $('#form-controls').show();
        });
    
        $('.js-form-edit-cancel').on('click', function(event){
            event.preventDefault();
            var ctx = $($(this).data('target'));
            var hide_el = $($(this).data('hide'));
            hide_el.hide();
            $('.js-edit-form').removeClass('disabled');
            deactivate_editable_inputs(ctx);
        });
        
        
        $('.js-user-search').on('keyup', function(event){
            event.stopPropagation();
            query = $(this).val().trim();
            if(query.length == 0 ){
                return;
            }
            search_options.data.search = query
            if(scheduled_query){
                clearTimeout(scheduled_query);
            }
            scheduled_query = setTimeout(userSearch, query_delay, search_options);
        });
        /*
        if(!user_available){
            ajax_api.ajax(options).then(function(response){
                if(response.is_valid){
                    user['username'] = response.username;
                    user['user_id'] = response.user_id;
                    user['last_login'] = response.last_login;
                    user_available = true;
                }else{
                    user['username'] = response.username;
                    user['user_id'] = response.user_id;
                    user['last_login'] = "-"
                    user_available = false;
                }
                
                if(typeof callback === "function"){
                    callback(user);
                }

            }, function(error){
                user_available = false;
            });
        }*/
        
    }

    function get_user(){
        return user;
    }

    function get_username(){
            
        return user_available ?  user.username : "";
    }

    function get_last_login(){
        return user_available ?  user.last_login : "";
    }

    //init();
    


    return {
        init : init,
        set_callback : function (func) {
            callback = func;
        },
        get_user : get_user,
        get_username : get_username,
        get_last_login : get_last_login,

        get_user_id : function(){
            return user_available ?  user.user_id : -1;
        },
        is_initialised : function(){
            return user_available;
        }
    }
    
});



define('cart_lyshop',['ajax_api', 'lang', 'accounts'], function(ajax_api, Locale, accounts) {
    'use strict';
    
    //accounts.init();
    var user = {};
    var customer = - 1;
    // accounts.set_callback(function(obj){
    //     user = obj;
    //     customer = user.user_id;
    // });

    function Cart(){
        this.user = "";
        this.items = [];
        this.total = 0;
        this.customer = {};
        this.csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');
        this.cart_container = null;
        this.add_to_cart_form = null;
    }

    Cart.prototype.init = function(){
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            console.warn("no csrf_token found");
            return;
        }
        this.cart_container = document.getElementById('cart');
        this.cart_container = document.getElementById('add-cart-form');
        if(!(this.cart == null || this.add_to_cart_form == null)){
            return;
        }
        var self = this;
        this.customer = document.querySelector('#cart-customer');
        if(this.customer){
            customer = this.customer.value;
        }
        $('.js-cart-update-item-quantity,.js-cart-delete-item').on('click', function(){
            var item = $(this);
            var obj = {};
            obj['action'] = item.data('action');
            obj['target'] = $('#' + item.data('target'));
            obj['update'] = $('#' + item.data('update'));
            obj['parent'] = $('#' + item.data('parent'));
            obj['cart_total'] = $('.js-cart-total');
            obj['cart_quantity'] = $('.js-cart-quantity');
            obj['item_uuid'] = item.data('item');
            self.update_product(obj);
        });

        $('#add-cart-form').submit(function(event){
            event.stopPropagation();
            event.preventDefault();
            var variant = $('#variant').val();
            var is_valid = variant.length > 0;
            $('.js-selection-required').toggleClass('hidden', is_valid);
            if(is_valid){
                self.add($(this).serialize(), $('#product-name', this).val());
            }
        });
        $('.js-cart-item-quantity').on('keypress', function(e){
            if(e.which != 13){
                return;
            }
            var item = $(this);
            self.update_product_quantity(item.data('item'), item.val(), item);
        });
        $('.js-attr-select').on('click', function(event){
            var element = $(this);
            var input = $('#' + element.data('target'));
            var was_selected = element.hasClass('chips-selected');
            
            element.toggleClass('chips-selected', !was_selected).siblings().removeClass('chips-selected');
            if(!was_selected){
                input.val(element.data('value'));
                $('.js-selection-required').toggleClass('hidden', !was_selected);
            }else{
                input.val('');
            }
            
        });
        $('.js-add-coupon').on('click', self.addCoupon.bind(this));
        $(".js-remove-coupon").on('click', self.removeCoupon);
    }

    Cart.prototype.set_user = function(obj){
        user = obj;
        customer = user.user_id;
    }

    Cart.prototype.add = function(formData, product_name){
        var self = this;
        if(!formData){
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/api/add-to-cart/',
            data : formData
        }
        
        ajax_api.ajax(option).then(function(response){
            self.update_badge(response.quantity);
            notify({level:response.success? 'info': 'error', content: response.message});
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:'product could not be added'});
        });
    }

    Cart.prototype.remove = function(product){
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            console.warning("Cart add oporation not allowed: csrf_token missing");
            return;
        }
        console.log("Removing product from cart");
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/cart/ajax_cart_item_delete/' + product.product_uuid + '/',
            data : {'csrfmiddlewaretoken': this.csrfmiddlewaretoken.value, 'item_uuid': product.product_uuid}
        }
        ajax_api(option).then(function(response){
            self.update_badge(response.quantity);
            notify({level:response.success? 'info': 'error', content: response.error});
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:'product could not be removed'});
        });
    }

    Cart.prototype.putInWishlist = function(product_uuid){
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            console.warning("csrf_token missing");
            return;
        }
    }

    Cart.prototype.clear = function(){
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            console.warning("csrf_token missing");
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/api/clear-cart/',
            data : {'csrfmiddlewaretoken': this.csrfmiddlewaretoken.value}
        }
        ajax_api(option).then(function(response){
            self.update_badge(0);
            notify({level:response.success? 'info': 'error', content: response.error});
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:'your cart could ne be cleared'});
        });
    }

    Cart.prototype.addCoupon = function(){
        var csrfmiddlewaretoken = $('input[name="csrfmiddlewaretoken"]').val();
        var coupon = $('#coupon').val();
        if(coupon.length == 0 || csrfmiddlewaretoken.length == 0){
            console.error("invalid coupon");
            return;
        }
        this.isValidCoupon(coupon, function(response){
            $("#coupon-error").toggle(!response.valid);
            if(response.status && response.valid){
                
                var option = {
                    type:'POST',
                    method: 'POST',
                    dataType: 'json',
                    url : '/api/add-to-coupon/',
                    data : {coupon : coupon, csrfmiddlewaretoken : csrfmiddlewaretoken}
                }
                ajax_api.ajax(option).then(function(response){
                    if(response.added){
                        $(".original-price").text(response.subtotal);
                        $(".final-price").text(response.total);
                        $(".js-cart-reduction").text(response.reduction);
                        $(".js-add-coupon").hide().siblings(".js-remove-coupon").show();
                        $("#coupon").prop('disabled', true).toggleClass('disabled');
                        notify({level:'info', content:'coupon added'});
                    }else{
                        notify({level:'info', content:'coupon could not be added'});
                    }
                    
                }, function(reason){
                    notify({level:'info', content:'coupon could not be added'});
                    console.error("Error on adding Coupon \"%s\" to user cart", coupon);
                    console.error(reason);
                });
            }else if(response.status && !response.valid){
                setTimeout(()=>{
                    $("#coupon-error").fadeOut(600);
                }, 5000);
                console.log("invalid coupon : %s", coupon);
            }
            
        });
    }
    

    Cart.prototype.removeCoupon = function(){
        var csrfmiddlewaretoken = $('input[name="csrfmiddlewaretoken"]').val();
        if(!csrfmiddlewaretoken){
            console.warning("Cart remove oporation not allowed: csrf_token missing");
            return;
        }
        var coupon = $('#coupon');
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/api/remove-coupon/',
            data : {coupon: coupon.val(), csrfmiddlewaretoken : csrfmiddlewaretoken}
        }
        ajax_api.ajax(option).then(
            function(response){
                var data = response;
                if(response.removed){
                    coupon.prop('disabled', false).removeClass('disabled', false).val('');
                    $(".original-price").text(response.subtotal);
                    $(".final-price").text(response.total);
                    $(".js-cart-reduction").text(response.reduction);
                    $(".js-add-coupon").show().siblings(".js-remove-coupon").hide();
                    notify({level:'info', content:'coupon removed'});
                }else{
                    notify({level:'warn', content:'Coupon not removed'});
                }
                //document.location.reload();
            }, 
            function(error){
                notify({level:'warn', content:'error on checking the coupon'});
            });

    }

    Cart.prototype.isValidCoupon = function(coupon, callback){
        var csrfmiddlewaretoken = $('input[name="csrfmiddlewaretoken"]').val();
        if(!csrfmiddlewaretoken){
            console.warning("Cart add oporation not allowed: csrf_token missing");
            return;
        }
        console.log("Verifying coupon ", coupon);
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/api/verify-coupon/',
            data : {coupon : coupon, csrfmiddlewaretoken : csrfmiddlewaretoken}
        }
        ajax_api.ajax(option).then(
            function(response){
                if(typeof callback == "function"){
                    callback(response);
                }
            }, 
            function(error){
                if(typeof callback == "function"){
                    callback(error);
                }
            });
    }

    Cart.prototype.update_product = function(to_update){
        var self = this;
        var data = {
            "csrfmiddlewaretoken"   : this.csrfmiddlewaretoken.value,
            //"quantity"              : to_update['quantity'],
            "action"                :  to_update['action'],
            "item"                  : to_update['item_uuid'],
            "customer"              : customer
        };
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            //url : '/cart/ajax-cart-item/' + data['item'] + '/' + data['action'] + '/',
            url : '/api/update-cart-item/',
            data : data
        }
        ajax_api.ajax(option).then(function(response){
            self.update_badge(response.count);
            if(!response.success){
                notify({level:'error', content:response.error});
                return;
            }
            if(response.count == 0){
                document.location.reload();
                return ;
            }
            if(response['removed']){
                to_update.parent.fadeOut('slow').remove()
            }else{
                to_update.target.val(response['item_quantity']);
                to_update.update.html(response['item_total']);
            }
            $(".original-price").text(response.subtotal);
            $(".final-price").text(response.total);
            $(".js-cart-quantity").text(response.count);
            $(".js-cart-reduction").text(response.reduction);
            notify({level:'info', content:'cart updated'});
            //to_update.cart_total.html(response['cart_total']);
            //to_update.cart_quantity.html(response['count']);            
            
        }, function(reason){
            console.error(reason);
        });
    }

    Cart.prototype.update_product_quantity = function(item_uuid, quantity, target){
        var data = {};
        data['csrfmiddlewaretoken'] = this.csrfmiddlewaretoken.value;
        data['quantity'] = quantity;
        data['action'] = 'update';
        data['item_uuid'] = item_uuid;
        data['customer'] = customer;
    
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/cart/ajax-cart-item-update/',
            data : data
        }
        ajax_api.ajax_lang(option).then(function(response){
            if(response['item_quantity'] == 0){
                $('#' + target.data('parent')).fadeOut('slow').remove();
            }else{
                target.val(response['item_quantity']);
                $('#' + target.data('total')).html(response['item_total']);
            }
    
            $(".original-price").text(response.subtotal);
            $(".final-price").text(response.total);
            $(".js-cart-quantity").text(response.count);
            $(".js-cart-reduction").text(response.reduction);
            this.update_badge(response.count);
            notify({level:'info', content:'cart updated'});
            
        }, function(reason){
    
            console.error(reason);
            target.val(reason.responseJSON['item_quantity']);
            notify({level:'warn', content:'cart could not be updated'});
        });
    }

    Cart.prototype.update_badge = function(quantity){
        $('.cart .js-cart-count').text(quantity);
    }

    return Cart;
});
define('attributes_api',["ajax_api"],function(ajax_api) {
    'use strict';
    var attr_template;
    function AttributManager(){
        
        //this.form = $('#form-attrs-management');
        this.form =$('#form-add-attributes');
        this.form_attributes = $('#form-add-attributes');
        this.form_attr_container = $('#form-attr-container', this.form);
        this.attrs_container = $('#form-attr-container', this.form);
        this.attrs_inputs = [];
        this.total_form = 0;
        this.input_max_length = 32;
        this.replace_pattern = /\d+/g;
        this.id_form_TOTAL_FORMS = $("#id_form-TOTAL_FORMS", this.form);
        this.id_form_INITIAL_FORMS = $("#id_form-INITIAL_FORMS", this.form);
        this.id_form_MIN_NUM_FORMS = $("#id_form-MIN_NUM_FORMS", this.form);
        this.id_form_MAX_NUM_FORMS = $("#id_form-MAX_MIN_FORMS", this.form);
    };
    AttributManager.prototype.init = function(){
        var self = this;
        
        
        if(this.form.length == 0){
            return;
        }
        $('.js-add-new-attribute').on('click', function(){
            //var target = $($(this).data('target'));
            //var form_container = $($(this).data('form'));
            self.create_attribute();
        });
        var option = {
            type:'GET',
            method: 'GET',
            dataType: 'json',
            url : '/api/attribute-types/'
        }
        ajax_api.ajax(option).then(function(response){
            attr_template = response;
        }, function(reason){
            console.error(reason);
        });
        
    };


    AttributManager.prototype.clear = function(){
        this.total_form = 0;
        this.updateManagementForm();
    };

    AttributManager.prototype.updateFormInputIndex = function(){
        var name;
        var id;
        var self = this;
        this.attrs_inputs.forEach(function (arr_input, index) {
            arr_input.forEach(function(e, i){
                self.updateInputIndex(e, index);
            });
        });
    };

    AttributManager.prototype.updateInputIndex = function(input, index){
        var name = input.attr('name');
        var id = input.attr('id');
        input.attr({
            id: id.replace(this.replace_pattern, index),
            name: name.replace(this.replace_pattern, index)
        });
    }

    AttributManager.prototype.create_attribute = function(){
        var self = this;
        var id = `attr-form-${this.total_form}`;
        var div = $('<div/>', {
            'class': 'flex mat-input',
            'id': id
        });
        var delete_button = $("<button/>", {
            'id': id + '-delete-btn',
            'text': 'Delete',
            'class' : 'mat-button mat-button-default'
        }).attr({
            'data-target': '#' + id
        });
        delete_button.append($("<i/>", {
            'class': 'fas fa-backspace icon'
        }));
        delete_button.on('click', function(){
            div.remove();
            self.decremente_management_form();
            self.updateFormInputIndex();
        });
        var label_name = $("<label/>").text(attr_template.name + " : ");
        var input_name = $('<input type="text">').attr({
            'id':`id-form-${this.total_form}-name`,
            'name': `form-${this.total_form}-name`,
            'maxlength': self.input_max_length
        });
        input_name.appendTo(label_name);
        var label_display_name = $("<label/>").text(attr_template.display_name + " : ");
        var input_display_name = $('<input type="text">').attr({
            'id':`id-form-${this.total_form}-display_name`,
            'name': `form-${this.total_form}-display_name`,
            'maxlength': self.input_max_length
        });
        input_display_name.appendTo(label_display_name);
        var label_value = $("<label/>").text(attr_template.value + " : ");
        var input_value = $('<input type="text">').attr({
            'id':`id-form-${this.total_form}-value`,
            'name': `form-${this.total_form}-value`,
            'maxlength': self.input_max_length
        });
        input_value.appendTo(label_value);

        var label_primary = $("<label/>").text(attr_template.is_primary + " : ");
        var input_primary = $('<input type="checkbox">').attr({
            'id':`id-form-${this.total_form}-primary`,
            'name': `form-${this.total_form}-is_primary`
        });
        input_primary.appendTo(label_primary);
        var label_value_type = $("<label/>").text(attr_template.value_type + " : ");
        var select_value_type = $('<select/>').attr({
            'id':`id-form-${this.total_form}-value_type`,
            'name': `form-${this.total_form}-value_type`,
        });
        select_value_type.appendTo(label_value_type);
        $('<option/>', {
            'selected': 'selected',
            'value': undefined,
            'text' : "Select a type"
        }).appendTo(select_value_type);
        attr_template.value_types.forEach(function(el, index){
            $('<option/>', {
                'value': el.key,
                'text' : el.value
            }).appendTo(select_value_type);
        });
        var input_form_id = $('<input type="hidden">').attr({
            'id':`id-form-${this.total_form}-id`,
            'name': `form-${this.total_form}-id`,
        });
        div.append([label_name, label_display_name, label_value, label_value_type, label_primary, input_form_id, delete_button]);
        div.appendTo(self.form_attr_container);
        self.incremente_management_form();
        self.attrs_inputs.push([input_name, input_display_name, input_value, select_value_type, input_primary, input_form_id]);
        return div;
    };

    AttributManager.prototype.incremente_management_form = function(){
        this.total_form = this.total_form + 1;
        this.id_form_TOTAL_FORMS.val(this.total_form);
        this.id_form_MIN_NUM_FORMS.val(this.total_form);
        this.id_form_MAX_NUM_FORMS.val(this.total_form);
    };

    AttributManager.prototype.updateManagementForm = function(){
        var self = this;
        this.attrs_inputs.forEach(function (arr_input, index) {
            arr_input.forEach(function(e, i){
                self.updateInputIndex(e, index);
            });
        });
    };

    AttributManager.prototype.decremente_management_form = function(){
        this.total_form = this.total_form - 1;
        this.id_form_TOTAL_FORMS.val(this.total_form);
        this.id_form_MIN_NUM_FORMS.val(this.total_form);
        this.id_form_MAX_NUM_FORMS.val(this.total_form);
    };

    return AttributManager;
});

define('components_api',[],function() {
    'use strict';

    var CAROUSEL_INTERVAL = 5000;

var Tabs = (function(){
    var tab_preffix = "step-header-";
    var tab_content_prefix = "step-";
    var checked_icon_class = "fas fa-check";
    var tab_title_class = "tab-title";
    var tab_title_checked = "tab-checked";
    var tab_contents = $('.tab-content');
    var tab_list = $('.tab');
    var current_index = 0;
    var tab_content_validators = [];
    var valid_tabs = [];
    var tabs_to_skips = [];

    function Tabs(){
        this.currentTab     = 0;
        this.tabCount       = 0;
        this.tabs           = {};
        this.tab            = {};
        this.tabsCount      = 0;
    };

    Tabs.prototype.init = function(){
        this.tabsCount = $(".tabs").length;
        this.tabs = $(".tab-content");
        this.tab = $(".tab");
        this.tabCount = this.tab.length;
        if(this.tabCount == 0){
            return;
        }
        var that = this;
        
        $('div.tab-container').each(function(){
            $(this).find('.tab-content:eq(0)').nextAll().hide();
        });
        //this.tabs.hide();
        $('div.tab-bar .tab').click(function(){
            var current = $(this);
            
            if(!current.hasClass('active')){
                current.addClass('active').siblings().removeClass('active');
                $(current.data('toggle')).show().siblings('div.tab-content').hide();
            }
        });
        $('.js-tab').on('click', function(){
            var tab_content = $($(this).data('toggle'));
            var tab_index = parseInt(tab_content.data('index'));
            $('.tab').eq(tab_index).addClass('active').siblings().removeClass('active');
            tab_content.show().siblings('.tab-content').hide();
        });
    };

    Tabs.prototype.add_validator = function(validator, index){
        if("function" == typeof validator){
            tab_content_validators[index] = validator;
        }
        
    };

    Tabs.prototype.toggle_checked = function(index, toggle){
        if(index < 0 || index > this.tabCount){
            return;
        }
        $('.' + tab_preffix + index + " .icon").toggleClass(checked_icon_class, toggle);
        $('.' + tab_preffix + index + " ." + tab_title_class).toggleClass(tab_title_checked, toggle);
        $('#' + tab_content_prefix + index + " .js-tab-next").toggleClass('disabled', !toggle);
        $('.js-send').prop('disabled', !toggle).toggleClass('disabled', !toggle);
        var index_included = valid_tabs.includes(index);
        if(toggle && !index_included ){
            valid_tabs.push(index);
        }else if(!toggle && index_included){
            valid_tabs.splice(index, 1);
        }

    };
    Tabs.prototype.onTabClicked = function(event){
        var tab = parseInt($(event.target).data("index"));
        if(tab != this.currentTab){
            this.currentTab = tab;
                this.update();
        }
    };
    Tabs.prototype.update = function(){
        this.tab.removeClass("active");
        $(this.tab[this.currentTab]).addClass("active");
        var that = this;
        this.tabs.hide();
        $(this.tabs[this.currentTab]).show();
    };
    return Tabs;
})();

var Slider = (function(){
    function Slider(){
        images_src = ['customer.png', 'businessman.png'];
    };

    Slider.prototype.init = function(){
       var slider =  $('#slider');
       var slides= slider.find('.slide');
       if(slides.length == 0){
           return;
       }
       slides.nextAll().hide();
       slides.first().html("I'm Slide 1");
    };

    return Slider;
})();

var Carousel = (function(){
    function Carousel(){
        

    }

    Carousel.prototype.init = function(){
        var self = this;
        this.timer = null;
        this.carousel = document.querySelector('.carousel');
        
        if(!this.carousel){
            return;
        }
        this.items = document.querySelector('.carousel-items');
        this.dots_wrapper = document.querySelector('.carousel-dots-wrapper');
        this.dots = document.querySelectorAll('.dot');
        this.next = document.querySelector('.carousel-control.next');
        this.prev = document.querySelector('.carousel-control.prev');
        this.total = this.items.children.length -1;
        this.active = 'active';
        this.current = 0;
        this.next.classList.toggle('hidden', !(this.total > 0));
        this.prev.classList.toggle('hidden', !(this.total > 0));
        this.dots_wrapper.classList.toggle('hidden', !(this.total > 0));
        if(this.total  > 0){
            this.prev.addEventListener('click', this.onPreviousClicked.bind(this));
            this.next.addEventListener('click', this.onNextClicked.bind(this));
            this.timer = setInterval(this.scrollNext.bind(this), CAROUSEL_INTERVAL);
        }
        
    }


    Carousel.prototype.setActivedot = function(){
        var self = this;
        this.dots.forEach((dot, i) => {
            i == self.current ? dot.classList.add(self.active): dot.classList.remove(self.active)
        });
    }

    Carousel.prototype.scrollToCurrent = function(){
        var self = this;
        this.items.style.transform = `translateX(${this.current * -100}%)`;
        this.setActivedot();
    }

    Carousel.prototype.scrollPrev = function(){
        if(this.current === 0){
            this.current = this.total +1;
        }
        this.current--;
        this.scrollToCurrent();
    }

    Carousel.prototype.scrollNext = function(){
        if(this.current === this.total){
            this.current = -1;
        }
        this.current++;
        this.scrollToCurrent();
        
    }

    Carousel.prototype.resetTimer = function(){
        clearInterval(this.timer);
        this.timer = setInterval(this.scrollNext.bind(this), CAROUSEL_INTERVAL);
    }

    Carousel.prototype.onNextClicked = function(){
        this.scrollNext();
        this.resetTimer();
    }

    Carousel.prototype.onPreviousClicked = function(){
        this.scrollPrev();
        this.resetTimer();
    }

    return Carousel;
})();

var Collapsible = (function(){
    function Collapsible(){
        this.$collapsible   = {}; // all element with collapsible class
        this.$close         = {}; // all button used to close a collapsible elements.

    }
    Collapsible.prototype.init = function(){
        this.$collapsible = $(".collapsible");
        var filter_content = $('#filter-content');
        if(this.$collapsible.length == 0){
            return;
        }
        $('.collapsible').on('click', '.collapse-toggle', function(event){
            event.stopPropagation();
            var content  = $('#' + $(this).data('target'));
            if(content.eq(filter_content)|| content.parent().eq(filter_content)){
                $('.collapsible .collapse-content', filter_content).not(content).hide();
            }else{
                $('.collapsible .collapse-content').not(content).hide();
            }
            content.toggle();
            //$('input.clearable', content).val('');
        });
        $(this.$collapsible).on("click", ".open", function(event){
            var target =$(event.target).data("target");
            if(target == undefined){
                $(this).parent().children(".collapse-content").toggle();
            }
            else{
                $(target).toggle();
            }
        });

        $(this.$collapsible).on("click", ".close", function(event){
            event.stopPropagation();
            var target =$(event.target).data("target");

            if(target == undefined){
                $(this).parent().toggle();
            }
            else{
                $(target).toggle();
            }
        });
    };

    return Collapsible;
})();


var Modal = (function(){
    function Modal(options){
        this.modal = {};
        this.init();
    }


    Modal.prototype.init = function(){
        var that = this;
        var modals = $(".js-open-modal").click(function(event){
            var modal = $("#" + $(this).data('target'));
            that.modal = modal;
            modal.show();
            if(window){
                $(window).click(function(eventModal){
                    if(eventModal.target == modal.get(0)){
                        modal.hide();
                        that.modal = undefined;
                        var inputs = $('input.input-filter', modal);
                        inputs.val("");
                        $(inputs.data('update')).text("");
                    }
                });
            }
        });

        var modals = $(".js-close-modal").click(function(event){
            var target = $("#" + $(event.target).data('target'));
            that.modal = undefined;
            target.hide();
            var inputs = $('input.input-filter', target);
            inputs.val("");
            $(inputs.data('update')).text("");
        });
    }

    Modal.prototype.create = function(options){
        var template = this.factories[options.factory].create();
        var modal = $(options.modal);
        $(".modal-content .modal-body", modal).append(template);

    }
    return Modal;
})();
var Component = {
    modal : new Modal(),
    collapsible : new Collapsible(),
    tabs : new Tabs(),
    carousel : new Carousel(),
    initComponent : function(){
        this.modal.init();
        this.tabs.init();
        this.collapsible.init();
        this.carousel.init();
    }
};
return Component;

});

define('checkout',[
'ajax_api'
], function(ajax_api) {
    'use strict';
    var ADDRESS_FIELDS = [ 
            'user', 'city', 'firstname', 'lastname', 'country', 
            'postal_code','phone_number', 'address_extra', 'street',
            'house_number', 'is_active'
        ];

    var ADDRESS_FIELDS_REQUIRED = [ 
        'user', 'city', 'firstname', 'lastname', 'country', 
        'postal_code','phone_number', 'street'
 
    ];
    var LI_PO_PREFIX = '#p-option-';
    var LI_PM_PREFIX = '#p-method-';
    var INPOUT_PM_PREFIX = '#pm-';
    var PAYMENT_METHOD_CONTAINER = "#payment-method ul";
    var SHIP_STANDARD = 0;
    var SHIP_EXPRESS  = 1
    var SHIP_IN_STORE = 2
    var SHIP_IN_STORE_POG = 3
    var SHIP_IN_STORE_LBV = 4
    var SHIPPING_ADDRESS_CONTAINER = "address-container";
    var api_address_url = '/api/create-address/';
    var SHIP_IN_HOUSE = [SHIP_STANDARD, SHIP_EXPRESS];
    var SHIP_IN_STORE = [SHIP_IN_STORE, SHIP_IN_STORE_LBV, SHIP_IN_STORE_POG];
    var address = {
        id : "",
        name : "",
        email : "",
        city : "",
        postal_code: "",
        street : "",
        house_number : "",
        phone_number : "",
        country : ""
    };
    var step = {
        index : 1,
        valid : false,
        tab : null
    };
    var shipmode_tab = 1;
    var address_tab = 2;
    var payment_tab = 3;
    var verification_tab = 4;
    var confirmation_tab = 5
    var steps_order = [shipmode_tab, address_tab, payment_tab, verification_tab, confirmation_tab]
    var tabs = null;

    var PAY_AT_DELIVERY = 0;
    var PAY_AT_ORDER = 1;
    var PAY_WITH_PAY = 2;
    var PAY_BEFORE_DELIVERY = 3;

    var PAYMENT_OPTIONS = [PAY_AT_DELIVERY, PAY_AT_ORDER, PAY_WITH_PAY, PAY_BEFORE_DELIVERY];

    var ORDER_PAYMENT_CASH = 0;
    var ORDER_PAYMENT_PAY = 1;
    var ORDER_PAYMENT_MOBILE = 2;

    var PAYMENT_METHODS = [ORDER_PAYMENT_CASH, ORDER_PAYMENT_MOBILE, ORDER_PAYMENT_PAY];



    var PAYMENT_OPTION_METHODS_MAPPING = new Map();
    PAYMENT_OPTION_METHODS_MAPPING.set(PAY_AT_DELIVERY, [ORDER_PAYMENT_CASH]);
    PAYMENT_OPTION_METHODS_MAPPING.set(PAY_AT_ORDER, [ORDER_PAYMENT_PAY, ORDER_PAYMENT_MOBILE]);
    PAYMENT_OPTION_METHODS_MAPPING.set(PAY_BEFORE_DELIVERY, [ORDER_PAYMENT_CASH, ORDER_PAYMENT_MOBILE, ORDER_PAYMENT_PAY]);

    var Checkout = function(tabs_comp){
        tabs = tabs_comp;
        this.address = {};
        this.payment_option = -1;
        this.payment_method = -1;
        this.currentTab = 1;
        this.shipping_price = 0;
        this.items_count = 0;
        this.steps = [];
        this.current_step = {};
        this.address_required = true;
        this.address_available = false;
        this.ship_mode = -1;
        this.ship_mode_valid = false;
        this.payment_option_is_valid = false;
        this.payment_method_is_valid = false;
        this.address_is_valid = false;
        this.shipping_price = 0;
        this.sub_total = 0;
        this.total = 0;
        this.form_is_valid = false;
        this.form_selector = "checkout-form";
        this.form = null;
        
    };
    
    Checkout.prototype.init = function(){
        var self = this;
        this.form = document.getElementById(this.form_selector);
        if(!this.form){
            return;
        }
        var addr = document.getElementById('address');

        $('.js-input-payment-option').on('change', function(event){
            self.payment_option = this.value;
            self.payment_method = -1;
            self.payment_method_is_valid = false;
             tabs.toggle_checked(payment_tab, false);
            self.update_payment_method();
            self.validate_pament_options();
        });
        $('.js-input-payment-method').on('change', function(event){
            self.payment_method = $(this).data('mode');
            self.validate_pament_method();
        });
        $('.js-add-address').on('click', function(){
            $('#new-address, #checkout-address').toggleClass('hidden');
            
            if(addr){
                addr.toggleAttribute('disabled');
            }
            
        });
        $('.js-create-address').on('click', function(){
            self.create_address();
        });
        $('.js-input-ship-mode').on('change', function(event){
            self.ship_mode_changed(this);
        });
        //this.validate_address();
        self.update_payment_method();
        tabs.init();
        
        $('input.js-input-ship-mode').prop('checked', false);
        $('.js-send').prop('disabled', true);
        this.form.addEventListener('submit', function(event){
            event.stopPropagation();
            if(!self.is_form_valid()){
                event.preventDefault();
                return false;
            }
            return true;
        });

    };

    Checkout.prototype.update_send_btn = function(){
        $('.js-send').prop('disabled', !this.is_form_valid());
        $('.js-send').toggleClass('disabled', !this.is_form_valid());
    };

    Checkout.prototype.is_form_valid = function(){
        return this.ship_mode_valid && this.address_is_valid && this.payment_option_is_valid && this.payment_method_is_valid;
    };

    Checkout.prototype.validate_address = function(){
        var toggle = false;
        var address_input = $('#address').get();
        var inputs_container = $('#new-address').get();
        if(address_input){
            toggle = true;
            this.address_is_valid = true;
        }else if(inputs_container){
            var inputs = $("input", inputs_container);
            toggle = true;
            var i;
            for(i in inputs){
                if(i.value == ""){
                    toggle = false;
                    break;
                }
            }
        }
        this.address_is_valid = toggle;
        tabs.toggle_checked(address_tab, toggle);
        this.update_send_btn();
    };
    Checkout.prototype.validate_pament_options = function(){
       var is_valid = PAYMENT_OPTIONS.includes(parseInt(this.payment_option));
       if(!is_valid){
           console.log("Payment Option is invalid");
       }
       //tabs.toggle_checked(payment_tab, is_valid);
       this.payment_option_is_valid = is_valid;
       this.update_send_btn();

    };

    Checkout.prototype.validate_pament_method = function(){
       var methods = PAYMENT_OPTION_METHODS_MAPPING.get(parseInt(this.payment_option));
       var is_valid = methods && methods.includes(parseInt(this.payment_method));
       if(!is_valid){
           console.log("Payment Method is invalid");
       }
        tabs.toggle_checked(payment_tab, is_valid);
        this.payment_method_is_valid = is_valid;
        this.update_send_btn();
        return is_valid;
     };

    Checkout.prototype.create_address = function(){
        var self = this;
        var csrfmiddlewaretoken = $('input[name="csrfmiddlewaretoken"]');
        var container = $('#new-address');
        var address_inputs = $('input', container);
        var available_fields = [];
        var data = {
            'csrfmiddlewaretoken' : csrfmiddlewaretoken.val()
        };
        address_inputs.each(function(){
            if(this.value){
                available_fields.push(this.name);
            }
            data[this.name] = this.value;
        });
        var missing_fields = ADDRESS_FIELDS_REQUIRED.filter(field => !available_fields.includes(field));
        if(missing_fields.length > 0){
            missing_fields.forEach(field =>{
                $(`input[name="${field}"]`, container).addClass('warn');
            });
            return;
        }else{
            address_inputs.removeClass('warn');
        }
        var option = {
            type:'POST',
            dataType: 'json',
            url : api_address_url,
            data : data
        }
        var add_promise = ajax_api.ajax(option).then(function(response){
            if(response.status){
                address_inputs.each(function(){
                    this.disabled = 'disabled';
                });
                var input = $('<input>', {name : 'address', type :'hidden', value : response.id});
                input.appendTo(container);
                this.address_is_valid = true;
                tabs.toggle_checked(address_tab, true);
                $('.js-add-address, .js-create-address').addClass('disabled').prop('disabled', 'disabled');
                this.update_send_btn();
            }else{
                console.log("address not created. Error : %s", response.error);
            }
            
        }, function(reason){
            console.error(reason);
        });
    }

    Checkout.prototype.update_payment_method = function(){
        //this.payment_option = parseInt($('.js-input-payment-option').val());
        var methods = PAYMENT_OPTION_METHODS_MAPPING.get(parseInt(this.payment_option));
        var li_list = $(PAYMENT_METHOD_CONTAINER + " li");
        li_list.hide();
        $('input', li_list).each(function(){
            this.checked = false;
        });
        if(methods){
            methods.forEach(function(value, index){
                $(LI_PM_PREFIX + value, PAYMENT_METHOD_CONTAINER).show();
            });
        }
        this.update_send_btn();
        
    };
    Checkout.prototype.validate_shipmode = function(){
        var shipmde_container = $('#step-' + shipmode_tab);
        var $selectec_ship_mode = $('.js-input-ship-mode:checked')
        var $input = $("input[type='radio']:checked", shipmde_container);
        tabs.toggle_checked(shipmode_tab, is_valid);
        return is_valid;
    };

    Checkout.prototype.ship_mode_changed = function(el){
        this.ship_mode = parseInt($(el).data('mode'));
        this.ship_mode_valid = SHIP_IN_HOUSE.includes(this.ship_mode) || SHIP_IN_STORE.includes(this.ship_mode);
        //var shipping_price_el = $('.js-shipping-price');
        //var grand_total_el = $('.js-grand-total');
        //var total_el = $('.js-final-price');
        this.sub_total = parseInt($('.js-final-price').text());
        this.shipping_price = parseInt($(el).data('price'));
        //total += shipping_price;
        this.total = this.sub_total + this.shipping_price;
        $('.js-shipping-price').text(this.shipping_price);
        $('.js-grand-total').text(this.total);
        this.address_required = SHIP_IN_HOUSE.includes(this.ship_mode);
        $('.js-add-address').toggle(this.address_required);
        $('#address-container').toggle(this.address_required);
        $('.js-no-address-required').toggleClass('hidden', this.address_required);
        tabs.toggle_checked(shipmode_tab, true);
        this.validate_address();
        this.update_send_btn();
    };
    
    return Checkout;
    
});

define('wishlist',['ajax_api', 'lang', ], function(ajax_api, Locale) {
    'use strict';
    

    function Wishlist(){
        this.user = "";
        this.items = [];
        this.total = 0;
        this.csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');
    }

    Wishlist.prototype.init = function(){
        var wishlist_component = $('.wishlist-component');
        if(wishlist_component.length == 0){
            return;
        }
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            return;
        }
        var self = this;

        $('.js-add-to-wishlist').on('click', function(){
            var item = $(this);
            
            var data = {
                'csrfmiddlewaretoken': self.csrfmiddlewaretoken.value,
                'wishlist_uuid' : item.data('list'),
                'product_uuid' : item.data('product')
            }
            self.add(data, item.data('name'));
        });
        $('.js-remove-from-list').on('click', function(){
            var item = $(this);
            
            var data = {
                'csrfmiddlewaretoken': self.csrfmiddlewaretoken.value,
                'wishlist_uuid' : item.data('list'),
                'product_uuid' : item.data('product')
            }
            self.remove(data, item.data('name'), item.data('target'));
        });
        $(".js-create-shop-list").on('click', function(){
            var item = $(this);
            var target = $('#' + item.data('target'));
            $('#wishlist-create-error', target).text('');
            $('#name', target).val('');
            item.parent().hide();
            target.show();
        });
        $(".js-close-box-wrapper").on('click', function(){
            var item = $(this);
            var target = $('#' + item.data('target'));
            var target_show = $('#' + item.data('show'));
            target.hide();
            $('#wishlist-create-error', target).text('');
            $('#name', target).val('');
            target_show.show();
        });

        $('#add-wishlist-form').on('submit', function(event){
            event.stopPropagation();
            event.preventDefault();
            self.create_and_add($(this).serialize());
        });
    }

    Wishlist.prototype.ui_update = function(){

    }

    Wishlist.prototype.rename = function(data, old_name){
        var self = this;
        if(!data){
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/wishlist/wishlists/ajax-rename-wishlist/',
            data : data
        }
        ajax_api.ajax_lang(option).then(function(response){
            notify({level:'info', content: response.message});
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:'product could not be added'});
        });
    }

    Wishlist.prototype.create_and_add = function(data){
        var self = this;

        if(!data){
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/wishlist/wishlists/ajax-create-add-wishlist/',
            data : data
        }
        var wishlist_dialog = $('#wishlist-dialog');
        var input_name = $('#name', wishlist_dialog);
        var error_hint = $('#wishlist-create-error', wishlist_dialog);

        ajax_api.ajax_lang(option).then(function(response){
            notify({level:'info', content: response.message});
            input_name.val('');
            wishlist_dialog.hide();
            error_hint.text('');
        }, function(reason){
            error_hint.text(reason.responseJSON.message);
            notify({level:'warn', content:'product could not be added'});
        });
    }

    Wishlist.prototype.add = function(data, product_name){
        var self = this;
        if(!data){
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/wishlist/wishlists/ajax-add-to-wishlist/',
            data : data
        }
        var wishlist_dialog = $('#wishlist-dialog');
        ajax_api.ajax_lang(option).then(function(response){
            notify({level:'info', content: response.message});
            wishlist_dialog.hide();
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:'product could not be added'});
        });
    }

    Wishlist.prototype.remove = function(data, product_name, target){
        var self = this;
        var p_target = $('#' + target);
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            return;
        }
        if(!data){
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/wishlist/wishlists/ajax-remove-from-wishlist/',
            data : data
        }
        ajax_api.ajax_lang(option).then(function(response){
            notify({level:'info', content: response.message});
            p_target.remove();
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:'product could not be added'});
        });
    }

    Wishlist.prototype.moveToAnotherList = function(list_uuid, product_uuid){
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            return;
        }
    }

    Wishlist.prototype.clear = function(){
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            return;
        }
    }

    Wishlist.prototype.delete = function(data){

    }

    

    Wishlist.prototype.update_product = function(to_update){
        var self = this;
        var data = {};
        data['csrfmiddlewaretoken'] = this.csrfmiddlewaretoken.value;
        data['quantity'] = to_update['quantity'];
        data['action'] = to_update['action'];
        data['item'] = to_update['item_uuid'];

        var option = {
            type:'POST',
            dataType: 'json',
            url : '/cart/ajax-cart-item/' + data['item'] + '/' + data['action'] + '/',
            data : data
        }
        ajax_api.ajax_lang(option).then(function(response){
            self.update_badge(response.count);
            if(response.count == 0){
                document.location.reload();
                return ;
            }
            if(response['removed']){
                to_update.parent.fadeOut('slow').remove()
            }else{
                to_update.target.val(response['item_quantity']);
                to_update.update.html(response['item_total']);
            }
            $(".original-price").text(response.subtotal);
            $(".final-price").text(response.total);
            $(".js-cart-quantity").text(response.count);
            $(".js-cart-reduction").text(response.reduction);
            notify({level:'info', content:'cart updated'});
            //to_update.cart_total.html(response['cart_total']);
            //to_update.cart_quantity.html(response['count']);            
            
        }, function(reason){
            console.error(reason);
        });
    }

    

    Wishlist.prototype.update_badge = function(quantity){
        $('.wishlists .badge').text(quantity);
    }

    return Wishlist;
});
define('commons',['ajax_api'], function(ajax_api) {
    'use strict';
    var fileUpload;
    var productManager;
    let campaignManager;
    var messages;
    var notification_wrapper;
    var fadeDelay = 5000; // 5s
    var AVAILABILITY_IMMEDIATELY = 0;
    var AVAILABILITY_ON_DEMAND = 1;
    let CAMPAIGN_TYPE_REPEAT_WEEKLY = 0, CAMPAIGN_TYPE_REPEAT_MONTHLY = 1,  CAMPAIGN_TYPE_REPEAT_ONCE = 2;
    

    var order_status_container;
    var order_payment_option_container;
    var order_status = [];
    var filter_form;

    function clean_form_before_submit(form){
        $('.filter-input', form).each(function(){
            this.disabled = this.value == "";
        });
        $('.no-submit', form).each(function(){
            this.disabled = true;
        });
    }
    
    function filter_singular_init(field_id, chips_class){
        var input = $(field_id);
        var selected_chips = $(chips_class);
        var values = ""
        selected_chips.each(function(index, element){
            var chips = $(this);
            if(index < selected_chips.length - 1){
                values += chips.data('value') + ",";
            }else{
                values += chips.data('value');
            }
        });
        input.val(values);
    }
    
    function initialize_filters(){
        filter_singular_init('#order-status-input', '.order-status-chips.chips-selected');
        filter_singular_init('#order-payment-option-input', '.order-payment-option-chips.chips-selected');
    }
    
    
    function integer_field_filter(element){
        var values = "";
        var input_target = $('#' + element.data('target'));
        var filter_type = element.data('type');
        var parent = element.parent();
        if (filter_type == "selection"){
            element.toggleClass('chips-selected', !element.hasClass('chips-selected'));
            var selected_chips = $('.chips-selected', parent);
            selected_chips.each(function(index, element){
                var chips = $(this);
                if(index < selected_chips.length - 1){
                    values += chips.data('value') + ",";
                }else{
                    values += chips.data('value');
                }
            });
            
    
        }else if(filter_type == "range-start" || filter_type == "range-end"){
            var start;
            var end;
            if(filter_type == 'range-start'){
                start = element.val();
                end = $('#' + element.data('range-next')).val();
            }else if(filter_type == 'range-end'){
                end = element.val();
                start = $('#' + element.data('range-next')).val();
            }
            if(start != "" || end != ""){
                values = start + '-' + end;
            }
    
        }else if (filter_type == "value"){
            values = element.val();
        }
        input_target.val(values);
    
    }
    
    function install_integer_filter(){
        $('.js-list-filter').on('click', function(){
            integer_field_filter($(this));
        });
        $('.js-range-filter,.js-value-filter').on('keyup change', function(){
            integer_field_filter($(this));
        });
        /*
        $('.js-value-filter').on('keyup,change', function(){
            integer_field_filter($(this));
        });
        */
    }
    
    function toggle_order_status(element){
        var value = element.data('value');
        var added = false;
        var status_input = $('#order-status-input');
        var current_value = status_input.val();
        var values = ""
        element.toggleClass('chips-selected', !element.hasClass('chips-selected'));
        var selected_chips = $('.order-status-chips.chips-selected');
        selected_chips.each(function(index, element){
            var chips = $(this);
            if(index < selected_chips.length - 1){
                values += chips.data('value') + ",";
            }else{
                values += chips.data('value');
            }
            added = true;
        });
        status_input.val(values);
        return added;
    }
    
    function toggle_playment_option(element){
        var value = element.data('value');
        var added = false;
        var input = $('#order-payment-option-input');
        var current_value = input.val();
        var values = ""
        element.toggleClass('chips-selected', !element.hasClass('chips-selected'));
        var selected_chips = $('.order-payment-option-chips.chips-selected');
        selected_chips.each(function(index, element){
            var chips = $(this);
            if(index < selected_chips.length - 1){
                values += chips.data('value') + ",";
            }else{
                values += chips.data('value');
            }
            added = true;
        });
        input.val(values);
        return added;
    }
    
    
    function toggle_amount_option(element){
        var input = $('#amount-filter');
        var filter_action = element.data('value');
        var added = false;
        if(input.val() == filter_action){
            //element.removeClass('chips-selected').siblings().removeClass('chips-selected');
            input.val('');
        }else{
            input.val(filter_action);
            added = true;
            //element.addClass('chips-selected').siblings().removeClass('chips-selected');
        }
        $(".amount-filter-chips .chips").removeClass('chips-selected');
        return added;
    }
    
    function toggle_date_filter(element){
        var input = $('#filter-action');
        var filter_action = element.data('filter-action');
        if(input.val() == filter_action){
            element.removeClass('chips-selected').siblings().removeClass('chips-selected');;
            input.val('');
        }else{
            input.val(filter_action);
            element.addClass('chips-selected').siblings().removeClass('chips-selected');
        }
    }

    function notify(message){
        if( typeof notification_wrapper === 'undefined' || typeof messages === 'undefined'){
            console.warn("Notify call for message %s. But There is no messages container", message);
            return;
        }
        let li = $('<li />', {
            "class" : message.level,
        });
        let div = $('<div />', {
            "class" : "notification flex"
        });
        div.append($('<i />', {
            "class" : "fas fa-info-circle icon"
        })).append($('<span />', {
            'text': message.content
        })).appendTo(li);
        li.appendTo(messages);
        //let top = notification_wrapper.offset().top - $(window).scrollTop();
        notification_wrapper.fadeIn().delay(fadeDelay).fadeOut('slow', function () {
            messages.empty();
        });
    }

    function notify_init(wrapper, message_container){
    
        if(typeof wrapper === 'undefined'){
            return;
        }

        if(typeof message_container === 'undefined' || $('li', message_container).length == 0){
            return;
        }

        wrapper.fadeIn().delay(fadeDelay).fadeOut('slow', function () {
            message_container.empty();
        });
    }

    function input_check_max_limit(input){
        var $input = $(input);
        var max_len = parseInt($input.data('max-length'));
        var len = $input.val().length;
        var target = $($input.data('target'));
        var max_len_reached = len > max_len;
        $input.toggleClass("warning", max_len_reached);
        target.toggleClass("danger", max_len_reached).text(len);
    }

    function track_action(track_element){
        let csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');
        let url = '/api/track-actions/';
        let action = parseInt(track_element.dataset.action);
        let options = {
            url : url,
            type: 'POST',
            data : {'action': action, 'csrfmiddlewaretoken': csrfmiddlewaretoken.value},
            dataType : 'json',
            async:false,
            cache : false,

        };
        ajax_api.ajax(options).then(function(response){
            
        }, function(reason){
            console.error(reason);
        });
    }


    var ListFilter = (function(){
        function ListFilter(){
            this.init();
            console.log("ListFilter instance created");
        };

        ListFilter.prototype.init = function(){
            console.log("ListFilter instance initializing");
            var self;
            $('.js-list-filter').on('keyup', function(event){
                event.stopPropagation();
                var value = this.value.trim().toLowerCase();
                var fieldname = $(this).data('field');
                var target = $("#" + $(this).data('target'));
                
                target.children().filter(function(){
                    self = $(this)
                    self.toggle(self.data(fieldname).toLowerCase().includes(value));
                });
            });

            console.log("ListFilter instance initialized");
        };

        ListFilter.prototype.filter = function(ctx, filter_field, value_list){
            if(!ctx || !filter_field || !value_list || value_list.length == 0){
                console.log("Filter called with missing argumtent");
                return;
            }
            console.log("Filtering started");
            $(".filterable", ctx).each(function(index, element){
                let filter_value = this.getAttribute(filter_field);
                console.log(" Filter Field = \"%s\" - Filter Value = \"%s\" - Value List = [\"%s\"]", filter_field ,filter_value, value_list)
                $(this).toggle(value_list.includes(filter_value));
            });
            console.log("Listfilter : filter run with success");
        };

        ListFilter.prototype.reset_filter = function(ctx, container){
            if(!ctx || !container){
                console.log(" Reset Filter called with missing context");
                return;
            }
            $("input:checkbox", ctx).each(function(){
                this.checked = false;
            });
            $(".filterable", container).each(function(index, element){
                $(this).show();
            });
            console.log("Listfilter : reset run with success");
        };

        return ListFilter;
    })();

    function clear_uploaded_files(){
        var files_container = document.querySelector('.file-list');
        var input_files = document.querySelector('#files');
        input_files.value = null;
        while(files_container.firstChild){
            files_container.removeChild(files_container.firstChild);
        }
        $('.js-uploaded-files-clear').hide();
    }
    function show_preview(files) {
        var files_container = document.querySelector('.file-list');
        var li;
        var img;
        while(files_container.firstChild){
            files_container.removeChild(files_container.firstChild);
        }
        console.log("files : ", files);
        var f;
        for(var i = 0; i < files.length; i++){
            f = files[i];
            li = document.createElement('li');
            img = document.createElement('img');
            img.src = URL.createObjectURL(f);
            img.height = 60;
            files_container.appendChild(li);
            img.onload = function(){
                URL.revokeObjectURL(img.src);
            };
            li.classList.add('file-entry');
            li.appendChild(img);
            const info = document.createElement('span');
            info.innerHTML = f.name + " : " + f.size + ' bytes';
            li.appendChild(info);
        }
    }

    function onDragInit(){
        var droppedFiles;
        var dragarea = document.querySelector('.drag-area');
        if(!dragarea){
            console.log("no drag-area could be found");
            return;
        }
        var $form = $('#' + dragarea.dataset.form);
        $('.drag-area').on('drag dragstart dragend dragover dragenter drop', function(e){
            e.preventDefault();
            e.stopPropagation();
        }).on('dragover dragenter', function(){
            dragarea.classList.add('on-drag');
        }).on('dragleave dragend drop', function(){
            dragarea.classList.remove('on-drag');
        }).on('drop', function(e){
            droppedFiles = e.originalEvent.dataTransfer.files;
            var input_files = document.querySelector('#files');
            console.log("Droped file : ", droppedFiles);
            console.log("Input file : ", input_files.files);
            input_files.files = droppedFiles;
            console.log("Input file 2 : ", input_files.files);
            show_preview(droppedFiles);
            $('.js-uploaded-files-clear').show();
            console.log("Files dropped : %s", droppedFiles.length);

        });
        $('.js-uploaded-files-clear').on('click', clear_uploaded_files);
    }

    function onDropHandler(event){
        event.preventDefault();
        var files = [];
        event.dataTransfer = event.originalEvent.dataTransfer;
        if(event.dataTransfer.items){
            var items = event.dataTransfer.items;
            for(var i = 0; i < items.length; i++){
                if(items[i].kind === 'file'){
                    var file = items[i].getAsFile();
                    fileUpload.addFile(file);
                }
            }
        }else{
            var files = event.dataTransfer.files;
            //fileUpload.setFiles(files);
            for(var i = 0; i < files.length; i++){
                //var file = files[i]
                fileUpload.addFile(files[i]);
            }
        }
        $('.drag-area').removeClass('on-drag');
    }


    function onDragOverHandler(event){
        event.preventDefault();
    }

    function onDragStartHandler(event) {
        $('.drag-area').addClass('on-drag');
        
    }
    function onDragEndHandler(event) {
        $('.drag-area').removeClass('on-drag');
        
    }

    function uploadFiles(form, files) {
        var formData = new FormData(form);
        files.forEach(function(file, index){
            formData.append("file_" + index, file, file.name);
        });
        $(form).serializeArray().forEach(function(input, index){
            formData.append(input.name, input.value);
        });
        var options = {
            url : $(form).attr('action'),
            type: 'POST',
            enctype : 'multipart/form-data',
            data : formData,
            processData : false,
            cache : false,
            contentType : false
        };
        ajax_api.ajax_lang(options, false).then(function(response){

        }, function(reason){

        });
        
    }

    var CampaignManager = (function(){
        function CampaignManager() {
            this.images = null;
            this.form = undefined;
            this.formData = undefined;
            this.input_file = undefined;
            this.drag_area = undefined;
            this.files_container = undefined;
            this.send_btn = undefined;
            this.clear_uploaded_files_btn = undefined;
            this.campaign_container = undefined;
            this.campaign_link = undefined;
            this.supported_formats = ['jpg', 'jpeg', 'png', 'webp'];
        };
        CampaignManager.prototype.init = function(){
            var self = this;
            this.form = document.querySelector('#campaign-upload-form') || document.querySelector('#campaign-update-form');
            if(this.form == null ){
                console.warn("No campaign form found");
                return;
            }
            this.drag_area = document.querySelector('.drag-area');
            if(!this.drag_area){
                console.warn("No drag-area on campaign form found");
                return;
            }
            this.input_file = document.querySelector('#files');
            if(!this.input_file){
                console.warn("No image input on campaign form found");
                return;
            }
            this.campaign_container = document.querySelector('#created-producted-link');
            this.campaign_link = document.querySelector('#created-producted-link a');
            this.files_container = document.querySelector('.file-list');

            $('.drag-area').on('drag dragstart dragend dragover dragenter drop', function(e){
                e.preventDefault();
                e.stopPropagation();
            }).on('dragover dragenter', function(){
                self.drag_area.classList.add('on-drag');
            }).on('dragleave dragend drop', function(){
                self.drag_area.classList.remove('on-drag');
            }).on('drop', function(e){
                self.images = e.originalEvent.dataTransfer.files;
                self.input_file.files = self.images;
                self.onImagesChanged();
                self.imagesPreview();

            });
            $('#files').on('change', function(e){
                self.images = self.input_file.files;
                self.onImagesChanged();
                self.imagesPreview();
            });
            $('.js-uploaded-files-clear').on('click', this.clearImages.bind(this));
            $('.js-input-campaign-type').on('change', this.onCampaignTpyeChanged);
            this.validators = [];
            
            $(this.form).on('submit', function(e){
                e.preventDefault();
                e.stopPropagation();
                self.formData = new FormData(self.form);
                self.upload();
            });

            console.log("Campaign initialized");

        };

        CampaignManager.prototype.imagesPreview = function(){
            let li;
            let img;
            while(this.files_container.firstChild){
                this.files_container.removeChild(this.files_container.firstChild);
            }
            let f;
            for(let i = 0; i < this.images.length; i++){
                f = this.images[i];
                li = document.createElement('li');
                img = document.createElement('img');
                img.src = URL.createObjectURL(f);
                img.height = 60;
                this.files_container.appendChild(li);
                img.onload = function(){
                    URL.revokeObjectURL(img.src);
                };
                li.classList.add('file-entry');
                li.appendChild(img);
                const info = document.createElement('span');
                info.innerHTML = f.name + " : " + Math.ceil(f.size/1024) + ' KB';
                li.appendChild(info);
            }
            $('.js-uploaded-files-clear').show();
        };

        CampaignManager.prototype.clearImages = function(){
            while(this.files_container.firstChild){
                this.files_container.removeChild(this.files_container.firstChild);
            }
            this.images = null;
            this.input_file.files = null;
            let li = document.createElement('li');
            let span = document.createElement('span');
            span.innerText = "No images";
            li.appendChild(span);
            this.files_container.appendChild(li);
            this.onImagesChanged();
        };

        CampaignManager.prototype.clear = function(){
            document.querySelector('#name').value = "";
            document.querySelector('#title').value = "";
            document.querySelector('#start_at').value = "";
            document.querySelector('#end_at').value = "";
            document.querySelector('#is_active').checked = false;
            document.querySelector('#description').value = "";
            document.querySelector('#description-counter').innerText = '0';
            this.input_file.files = null;
            this.images = null;
            this.campaign_link.href = '';
            this.campaign_link.innerText = '';
            this.campaign_container.style.display = 'none';
            this.onImagesChanged();
        }

        CampaignManager.prototype.is_update_form = function(){
            return this.form != null ? this.form.id == 'campaign-update-form' : false;
        }

        CampaignManager.prototype.onImagesChanged = function(){
            this.drag_area.classList.toggle('active', this.images && (this.images.length > 0));
        };

        CampaignManager.prototype.onUploadResponse = function(data){
            if(!data.success){
                
                return;
            }
            this.clear();
            this.campaign_link.href = data.url;
            this.campaign_link.innerText = data.url_text + " : " + data.name;
            this.campaign_container.style.display = 'flex';
        };

        CampaignManager.prototype.upload = function(){
            let self = this;
            let form_is_valid = this.validate();
            if(!form_is_valid){
                console.log("Campaign form is invalid");
                return;
            }

            let url = this.is_update_form() ? '/api/update-campaign/' + this.form.dataset.campaign + '/' : '/api/create-campaign/';

            let options = {
                url : url,
                type: 'POST',
                enctype : 'multipart/form-data',
                data : this.formData,
                dataType : 'json',
                processData : false,
                cache : false,
                contentType : false
            };
            ajax_api.ajax(options).then(function(response){
                let msg = {
                    content : response.message,
                    level : response.created
                }
                notify(msg);
                self.onUploadResponse(response);
                self.clearImages();
                

            }, function(reason){
                console.error("Files could not be uploaded.");
                console.error(reason);
                self.clearImages();
            });
        };

        CampaignManager.prototype.onCampaignTpyeChanged = function(){
            let c_type = document.querySelector('.js-input-campaign-type:checked');
            let c_type_entries = document.querySelectorAll('.campaign-type');
            let c_type_value = parseInt(c_type.value);
            c_type_entries.forEach((e)=>{
                if((parseInt(e.dataset.campaignType) == c_type_value) || (parseInt(e.dataset.campaignAltType) == c_type_value)){
                    e.style.display = 'block';
                }else{
                    e.style.display = 'block';
                }

            });
            

        };


        CampaignManager.prototype.validate = function(){
            let name = document.querySelector('#name');
            let title = document.querySelector('#title');
            let description = document.querySelector('#description');
            let c_type = document.querySelector('.js-input-campaign-type:checked');
            let c_type_entries = document.querySelectorAll('.campaign-type');
            let c_type_value = c_type != null ? parseInt(c_type.value) : null;
            let is_valid = true;

            if(name == null || title == null || description == null){
                is_valid = false;
            }
            if(name.value == ""){
                name.classList.add('warn');
                is_valid = false;
            }else{
                name.classList.remove('warn');
            }
            if(title.value == ""){
                title.classList.add('warn');
                is_valid = false;
            }else{
                title.classList.remove('warn');
            }
            if(description.value == ""){
                description.classList.add('warn');
                is_valid = false;
            }else{
                description.classList.remove('warn');
            }
            if(c_type_value == null){
                is_valid = false;
            }
            let start_at = document.querySelector('#start_at');
            let end_at = document.querySelector('#end_at');
            let repeat_day = document.querySelector('#repeat_day');
            if(c_type_value == CAMPAIGN_TYPE_REPEAT_ONCE){
                if(start_at == null || end_at == null){
                    is_valid = false;
                }
                if( (start_at != null &&  start_at.value.length == 0)){
                    start_at.classList.add('warn');
                }
                if( (end_at != null &&  end_at.value.length == 0)){
                    end_at.classList.add('warn');
                }
                let start_date = new Date(start_at.value);
                let end_date = new Date(end_at.value);
                let today = new Date();
                if((start_date < today) || (end_date < today)){
                    start_at.classList.add('warn');
                    end_at.classList.add('warn');
                    is_valid = false;
                }else{
                    start_at.classList.remove('warn');
                    end_at.classList.remove('warn');
                }
            }
            if(c_type_value == CAMPAIGN_TYPE_REPEAT_WEEKLY || c_type_value == CAMPAIGN_TYPE_REPEAT_MONTHLY){
                if(repeat_day == null || isNaN(parseInt(repeat_day.value))){
                    c_type.classList.add('warn');
                    repeat_day.classList.add('warn');
                    is_valid = false;
                }else{
                    c_type.classList.remove('warn');
                    repeat_day.classList.remove('warn');
                }
            }
            
            /*
            if((this.images == null || this.images.length == 0) && !this.is_update_form()){
                return false;
            }*/
            return is_valid;
        };

        return CampaignManager;

    })();

    var ProductManager = (function(){
        function ProductManager() {
            this.images = null;
            this.form = undefined;
            this.formData = undefined;
            this.input_file = undefined;
            this.drag_area = undefined;
            this.files_container = undefined;
            this.send_btn = undefined;
            this.clear_uploaded_files_btn = undefined;
            this.created_product_container = undefined;
            this.created_product_link = undefined;
            this.on_demand_url = undefined;
            this.supported_formats = ['jpg', 'jpeg', 'png', 'webp'];
        };
        ProductManager.prototype.init = function(){
            var self = this;
            this.form = document.querySelector('#product-upload-form') || document.querySelector('#product-update-form');
            if(this.form == null ){
                return;
            }
            this.drag_area = document.querySelector('.drag-area');
            if(!this.drag_area){
                return;
            }
            this.input_file = document.querySelector('#files');
            if(!this.input_file){
                return;
            }
            this.created_product_container = document.querySelector('#created-producted-link');
            this.created_product_link = document.querySelector('#created-producted-link a');
            this.files_container = document.querySelector('.file-list');
            this.on_demand_url = document.querySelector('#on-demand-url');
            $('.drag-area').on('drag dragstart dragend dragover dragenter drop', function(e){
                e.preventDefault();
                e.stopPropagation();
            }).on('dragover dragenter', function(){
                self.drag_area.classList.add('on-drag');
            }).on('dragleave dragend drop', function(){
                self.drag_area.classList.remove('on-drag');
            }).on('drop', function(e){
                self.images = e.originalEvent.dataTransfer.files;
                self.input_file.files = self.images;
                self.onImagesChanged();
                self.imagesPreview();

            });
            $('#files').on('change', function(e){
                self.images = self.input_file.files;
                self.onImagesChanged();
                self.imagesPreview();
            });
            $('.js-input-availability').on('change', function(e){
                try {
                    self.on_demand_url.classList.toggle('hidden', !(parseInt(this.value) == AVAILABILITY_ON_DEMAND));
                } catch (error) {
                    
                }
            });
            $('input.product-type-input').on('change', update_attrs_from_type);
            $('.js-uploaded-files-clear').on('click', this.clearImages.bind(this));
            this.validators = [this.validateAvailability, this.validateBrand, this.validateCategory, 
                                this.validateDescriptions, this.validateGender, this.validateName, 
                                this.validateProductType, this.validateVariants, this.validateImages];
            

            
            $(this.form).on('submit', function(e){
                e.preventDefault();
                e.stopPropagation();
                self.formData = new FormData(self.form);
                self.upload();
            });

            console.log("ProductManager initialized");

        };

        ProductManager.prototype.imagesPreview = function(){
            var li;
            var img;
            while(this.files_container.firstChild){
                this.files_container.removeChild(this.files_container.firstChild);
            }
            var f;
            for(var i = 0; i < this.images.length; i++){
                f = this.images[i];
                li = document.createElement('li');
                img = document.createElement('img');
                img.src = URL.createObjectURL(f);
                img.height = 60;
                this.files_container.appendChild(li);
                img.onload = function(){
                    URL.revokeObjectURL(img.src);
                };
                li.classList.add('file-entry');
                li.appendChild(img);
                const info = document.createElement('span');
                info.innerHTML = f.name + " : " + Math.ceil(f.size/1024) + ' KB';
                li.appendChild(info);
            }
            $('.js-uploaded-files-clear').show();
        };

        ProductManager.prototype.clearImages = function(){
            while(this.files_container.firstChild){
                this.files_container.removeChild(this.files_container.firstChild);
            }
            this.images = null;
            this.input_file.files = null;
            var li = document.createElement('li');
            var span = document.createElement('span');
            span.innerText = "No images";
            li.appendChild(span);
            this.files_container.appendChild(li);
            this.onImagesChanged();
        };

        ProductManager.prototype.clear = function(){
            var inputs = [];
            var name = document.querySelector('#name');
            var display_name = document.querySelector('#display-name');
            var gender = document.querySelectorAll('#gender');
            var seller = document.querySelector('#sold-by');
            var availability = document.querySelectorAll('#availability');
            var attributes = document.querySelectorAll('#attributes');
            var price = document.querySelector('#price');
            var discount = document.querySelector('#promotion-price');
            var description = document.querySelector('#description');
            var short_description = document.querySelector('#short-description');
            short_description.value = "";
            description.value = "";
            price.value = "";
            discount.value = "";
            name.value = "";
            display_name.value = "";
            gender.selectedIndex = null;
            seller.selectedIndex = null;
            availability.selectedIndex = null;
            attributes.selectedIndex = null;
            this.input_file.files = null;
            this.images = null;
            this.created_product_link.href = '';
            this.created_product_link.innerText = '';
            this.created_product_container.style.display = 'none';
            this.onImagesChanged();
        }

        ProductManager.prototype.is_update_form = function(){
            return this.form != null ? this.form.id == 'product-update-form' : false;
        }

        ProductManager.prototype.validate = function(){
            // if(this.validators){
            //     return this.validators.every((f)=>f());
            // }
            return true;
        };

        ProductManager.prototype.validateName = function(){
            var name = document.querySelector('#name');
            var display_name = document.querySelector('#display-name');
            // if(!name || !display_name || !name.value.lenght || !display_name.value.length){
            //     console.log("name & display name errors");
            //     return false;
            // }
            return true;
        };

        ProductManager.prototype.validateGender = function(){
            var gender = document.querySelector('#gender');
            // if(!gender  || !gender.value.length){
            //     console.log("error errors");
            //     return false;
            // }
            return true;
        };

        ProductManager.prototype.validateAvailability = function(){
            var availability = document.querySelector('#availability');
            // if(!availability  || !availability.value.length){
            //     console.log("availability errors");
            //     return false;
            // }
            return true;
        };

        ProductManager.prototype.validateCategory = function(){
            var category = document.querySelector('#category');
            // if(!category  || !category.value.length){
            //     console.log("category errors");
            //     return false;
            // }
            return true;
        };

        ProductManager.prototype.validateBrand = function(){
            var brand = document.querySelector('#brand');
            // if(!brand  || !brand.value.length){
            //     console.log("brand errors");
            //     return false;
            // }
            return true;
        };

        ProductManager.prototype.validateProductType = function(){
            var product_type = document.querySelector('#product-type');
            // if(!product_type  || !product_type.value.length){
            //     console.log("product type errors");
            //     return false;
            // }
            return true;
        };

        ProductManager.prototype.validatePrices = function(){
            var price = document.querySelector('#price');
            // if(!price  || !price.value.length){
            //     console.log("price errors");
            //     return false;
            // }
            return true;
        };

        ProductManager.prototype.validateVariants = function(){
            var variants = document.querySelector('#variants');
            // if(!variants  || !variants.value.length){
            //     console.log(" variants errors");
            //     return false;
            // }
            return true;
        };

        ProductManager.prototype.validateDescriptions = function(){
            var description = document.querySelector('#description');
            // if(!description  || !description.value.length){
            //     console.log(" description errors");
            //     return false;
            // }
            return true;
        };

        ProductManager.prototype.onImagesChanged = function(){
            this.drag_area.classList.toggle('active', this.images && (this.images.length > 0));
        };

        ProductManager.prototype.validateImages = function(){
            
            if(!this.images  || !this.input_file.files.length){
                console.log(" images errors");
                return false;
            }
            return true;
        };

        ProductManager.prototype.onUploadResponse = function(data){
            
            if(!data.success){
                return;
            }
            this.created_product_link.href = data.url;
            this.created_product_link.innerText = data.url_text + " : " + data.name;
            this.created_product_container.style.display = 'flex';
            if(!this.is_update_form()){
                self.clearImages();
                this.clear();
            }
        };

        ProductManager.prototype.upload = function(){
            let self = this;
            var form_is_valid = this.validate();
            if(!form_is_valid){
                console.log("Product form is invalid");
                return;
            }
            let url = this.is_update_form() ? '/api/update-product/' + this.form.dataset.product + '/' : '/api/create-product/';
            var options = {
                url : url,
                type: 'POST',
                enctype : 'multipart/form-data',
                data : this.formData,
                dataType : 'json',
                processData : false,
                cache : false,
                contentType : false
            };
            ajax_api.ajax(options).then(function(response){
                var msg = {
                    content : response.message,
                    level : response.success
                }
                notify(msg);
                self.onUploadResponse(response);
                
                

            }, function(reason){
                console.error("Files could not be uploaded.");
                console.error(reason);
                if(!self.is_update_form()){
                    self.clearImages();
                }
            });
        };

        return ProductManager;

    })();

    var FileUpload = (function(){
        function FileUpload(){
            this.files = [];
            this.form = undefined;
            this.formData = undefined;
            this.clean = true;
            this.drag_area = $('.drag-area');
            this.file_list_container = $('.file-list');
            this.file_entries = {};
            this.empty_element = $('.no-data', this.file_list_container);
            this.send_btn = $('.js-send-file-upload-btn');
            this.clear_btn = $('.js-file-list-clear-btn');
            //this.init();
        };

        FileUpload.prototype.init = function(){
            var that = this;
            this.clear_btn.on('click', this.clear.bind(this));

            $('.drag-area')
                .on('drop', onDropHandler)
                .on('dragover', onDragOverHandler)
                .on('dragenter', onDragStartHandler)
                .on('dragleave', onDragEndHandler)
            console.log("Fileupload initialized");
        };

        FileUpload.prototype.clear = function() {
            this.files = [];
            this.formData = undefined;
            this.form = undefined;
            this.clean = true;
            //$('.file-entry', this.file_list_container).remove();
            this.file_list_container.empty().append(this.empty_element);
            this.drag_area.removeClass('non-empty');
            this.send_btn.addClass('disabled').prop('disabled',true);
            this.clear_btn.addClass('hidden');
            console.log("[OK] cleared file list");
        };

        FileUpload.prototype.isClean = function() {
            return this.clean;
        };

        FileUpload.prototype.setForm = function(form){
            this.form = form;
            this.clean = false;
            return this;
        };

        FileUpload.prototype.setFiles = function(files){
            this.files = files;
            this.clean = false;
            return this;
        };

        FileUpload.prototype.addFile = function(file){
            if(this.files.some(f => f.name == file.name)){
                console.warn("A file with the same name already exists.")
                return this;
            }
            var that = this;
            this.files.push(file);
            var li = $('<li />',{
                id:"file-" + that.files.length,
                'class' : 'file-entry',
                'title': file.name,
            });
            var entry_text = $('<span />', {
                text: file.name
            });
            var entry_remove_btn = $('<button />', {
                class: 'mat-button mat-button-text',
                type: 'button'
            }).append($('<i />', {
                class: 'fas fa-times icon'
            }));
            entry_remove_btn.on('click', function(event){
                event.preventDefault();
                event.stopPropagation();
                that.removeFile([file.name]);
                li.remove();
            });
            li.append(entry_text, entry_remove_btn).appendTo(that.file_list_container);
            $('.no-data', that.file_list_container).remove();
            this.drag_area.addClass('non-empty');
            this.send_btn.removeClass('disabled').prop('disabled',false);
            this.clear_btn.removeClass('hidden');
            this.clean = false;
            return this;
        };

        FileUpload.prototype.removeFile = function(fileNames){
            console.log("removing files : %s", fileNames);
            var old_length = this.files.length;
            this.files = this.files.filter(f => !fileNames.includes(f.name));
            if(this.files.length != old_length && this.files.length < old_length){
                console.log("removed files : %s", fileNames);
                if(this.files.length == 0){
                    this.file_list_container.append(this.empty_element);
                    this.drag_area.removeClass('non-empty');
                    this.send_btn.addClass('disabled').prop('disabled',true);
                    this.clear_btn.addClass('hidden');
                }
                this.clean = false;
            }else{
                console.log("files : %s not removed", fileNames);
                
            }
            
            return this;
        };
        FileUpload.prototype.update = function(){
            if(this.isClean()){
                console.warn("FileUpload can not be updated. formData is already clean.");
                return;
            }
            if(!this.form || !this.files || this.files.length == 0){
                console.warn("FileUpload can not be updated. form or files are missing.");
                return;
            }
            this.formData = new FormData(this.form);
            var that = this;
            this.files.forEach(function(file, index){
                that.formData.append("file_" + index, file, file.name);
            });
            this.clean = true;
            /*
            $(form).serializeArray().forEach(function(input, index){
                formData.append(input.name, input.value);
            });
            */
        };

        FileUpload.prototype.canSend = function(){
            let formValid = typeof this.form != 'undefined';
            let filesValid = typeof this.files != 'undefined';

            return formValid && filesValid && this.files.length > 0;
        };

        FileUpload.prototype.getForm = function() {
            return this.form;
        };

        FileUpload.prototype.getFiles = function() {
            return this.files;
        }

        FileUpload.prototype.getFormDate = function() {
            return this.formData;
        }

        FileUpload.prototype.upload = function(){
            if(!this.canSend()){
                console.error("Files can not be sent. Please check your files form. Files or form are missing.");
                return;
            }
            if(typeof ajax_api.ajax_lang === 'undefined'){
                var errorMsg = "can not upload files. ajax funtion is not defined";
                console.error(errorMsg);
                throw new Error(errorMsg);
            }
            var that = this;
            var options = {
                url : $(this.form).attr('action'),
                type: 'POST',
                enctype : 'multipart/form-data',
                data : this.formData,
                processData : false,
                cache : false,
                contentType : false
            };
            ajax_api.ajax(options).then(function(response){
                console.info("Files have bean uploaded.");
                var msg = {
                    content : response.message,
                    level : response.status === 'OK'
                }
                notify(msg);
                fileUpload.clear();
                

            }, function(reason){
                console.error("Files could not be uploaded.");
                console.error(reason);
                fileUpload.clear();
            });

        };

        return FileUpload;
    })();

    function kiosk_update(event){
        document.getElementById('main-image').src = event.target.src;
        $(".kiosk-image").removeClass('active').filter(event.target).addClass("active");
    }

    function dateFormat(index, input){
        console.log(input);
        console.log("Date Value : %s", input.value);
    }

    function regroupe_attrs(attribute_list){
        var keySet = new Set();
        var attrs_map = {};
        attribute_list.forEach((o)=>{
            keySet.add(o.name);
        });
        keySet.forEach((name)=>{
            attrs_map[name] = attribute_list.filter(o => o.name == name).sort((first, second) =>{
                if (first.value < second.value) {
                    return -1
                }
                if(first.value > second.value){
                    return 1;
                }
                return 0;
            });
        });
        return attrs_map;
    }

    function update_attrs(attrs_mapping){
        var attributes_container = document.querySelector('#attributes-container');
        while(attributes_container.firstChild){
            attributes_container.removeChild(attributes_container.firstChild);
        }
        var i = 0;
        for(const [key,value] of Object.entries(attrs_mapping)){
            var div = document.createElement('div');
            var label = document.createElement('label');
            var select = document.createElement('select');
            var opt = document.createElement('option');
            opt.innerText = `Select a ${key}`;
            select.appendChild(opt);
            value.forEach((o)=>{
                opt = document.createElement('option');
                opt.value = o.id;
                opt.innerText = o.value;
                select.appendChild(opt);
            });
            select.name = 'attributes';
            select.id = select.name + "-" + i;
            select.multiple = true;
            label.htmlFor = select.id;
            label.innerText = key.toUpperCase();
            i++;
            div.appendChild(label);
            div.appendChild(select);
            div.classList.add('form-group');
            attributes_container.appendChild(div);
            
        }

    }

    function update_attrs_from_type(){
        var input = document.querySelector('input.product-type-input:checked');
        var option = {
            type:'GET',
            method: 'GET',
            dataType: 'json',
            url : '/api/attrs-from-type/' + input.dataset.typeUuid + '/'
        }
        ajax_api.ajax(option).then(function(response){
            var attributes = response.attributes;
            var attrs_mapping = regroupe_attrs(attributes);
            update_attrs(attrs_mapping);
        }, function(reason){
            console.error(reason);
        });
    }


    $(document).ready(function(){
        if(window){
            window.notify = notify;
        }
        notification_wrapper = $('#notifications-wrapper');
        messages = $('#messages', notification_wrapper);
        //onDragInit();
        notify_init(notification_wrapper, messages);
        var listfilter = new ListFilter();
        fileUpload = new FileUpload();
        campaignManager = new CampaignManager();
        productManager = new ProductManager();
        productManager.init();
        campaignManager.init();
        
        $('.collapsible .toggle').on('click', function(event){
            var parent = $(this).parent();
            var target = $('.' + this.getAttribute('data-toggle'), parent);
            $('input', parent).val('');
            
            target.toggle();
        });
        $('.js-filter-btn').on('click', function(event){
            var ctx = $('#' + this.getAttribute('data-context'));
            var input_name = this.getAttribute('data-input-name');
            var container = $('#' + this.getAttribute('data-container'));
            var filter_field = this.getAttribute("data-filter-field");
            var value_list = [];
            $("input:checked[name=\"" + input_name + "\"]", ctx).each(function(){
                console.log("adding value to filter : %s", this.getAttribute("data-value"));
                value_list.push(this.getAttribute("data-value"));
            });
            listfilter.filter(container, filter_field, value_list);
        });

        $('.js-filter-reset-btn').on('click', function(event){
            var ctx = $('#' + this.getAttribute('data-context'));
            var container = $('#' + this.getAttribute('data-container'));
            listfilter.reset_filter(ctx, container);
        });

        $('#file-upload-form').on('submit', function(event){
            console.log("submitting file-upload-form");
            event.preventDefault();
            event.stopPropagation();
            console.log(this);
            fileUpload.setForm(this);
            fileUpload.update();
            fileUpload.upload();
            //return false;
            
        });
        $('.js-select-image').on('click', kiosk_update);
        $('.js-select-image').first().click();
        $(".limited-input").on("keyup", function(event){
            event.stopPropagation();
            console.log("limited input keyup");
            input_check_max_limit(this);
        });
        $('.js-dialog-open').on('click', function(){
            var target = $('#' + $(this).data('target'));
            target.show();
        });

        
        $('.js-dialog-close').on('click', function(){
            var target = $("#" + $(this).data('target'));
            target.hide();
            //var parent = $(this).parents('.dialog').hide();
            $('input[type!="hidden"]', target).val('');
        });
        $('.js-reveal-btn, .js-revealable-hide').on('click', function(){
            var target = $($(this).data('target')).parent();
            $('.js-revealable', target).toggleClass('hidden');
        });
        $('.js-clear-input').on('click', function(){
            
            var target = $('#' + $(this).data('target'));
            console.log("Clearing inputs from ", target);
            $('input[type!=checkbox]', target).val('');
            $('input:checkbox', target).val('').prop('checked', '');
        });
        var selectable_list = $(".js-selectable");
        var activable_list = $(".js-activable");
        var select_all = $('.js-select-all');
        selectable_list.on('click', function(){
            var is_selected = selectable_list.is(function (el) {
                return this.checked;
            });
            
            var selected_all = selectable_list.is(function (el) {
                return !this.checked;
            });
            select_all.prop('checked', !selected_all);
            activable_list.prop('disabled', !is_selected);
        });

        select_all.on('click', function(){
            console.log("Select All clicked : %s", this.checked);
            selectable_list.prop('checked', this.checked);
            activable_list.prop('disabled', !this.checked);
        });

        filter_form = $('#filter-form');
        $('#filter-form').on('submit', function(event){
            $('input[name="csrfmiddlewaretoken"]').prop('disabled', true);
            clean_form_before_submit(this);
        });
        $('.js-pagination').on('click', function(event){
            
            if(filter_form.length != 0){
                event.preventDefault();
                event.stopPropagation();
                
                var page = $(event.target).data('page');
                var input = $('<input />', {
                    name : 'page',
                    value : page
                });
                input.appendTo(filter_form);
                filter_form.submit();
            }
            

        });

        $("#amount-filter-input").on('keyup', function(event){
            var input = $(this);
            $(input.data('update')).text(input.val());
            $("#" + input.data('target')).val(input.val());
        });
        initialize_filters();
        install_integer_filter();
        
        $('.js-custom-input .input-value').on('click', function(event){
            $(this).toggle();
            $('.input-edit-wrapper', $(this).parent()).toggle();
        });
        
        /*
        $('.js-custom-input .js-edit').on('click', function(event){
            $(this).parent().toggle();
            $(this).siblings('input').toggle();
        });
        */
        
        $('.js-custom-input input').on('keyup change', function(event){
            var $el = $(this);
            $el.parent().siblings('.input-value').html($el.val());
        });
        
        $('.js-custom-input .js-edit-close').on('click', function(event){
            var $el = $(this).siblings('input');
            $el.parent().siblings('.input-value').html($el.val());
            $(this).parent().toggle();
        });
        $('.js-menu').on('click', function(){
            console.log("Menu clicked");
            $('.site-panel').css('left', 0);
            $('.js-menu-close').show();
            $(this).hide();
    
        });
        $('.js-menu-close').on('click', function(){
            var panel = $('.site-panel');
            var left = '-' + panel.css('width');
            panel.css('left', left );
            $('.js-menu').show();
            $(this).hide();
        });
        $('.js-action-abtest').on('click', function(e){
            track_action(this);
        });
        console.log("commons.js loaded");
        /*
        $('.js-revealable-hide').on('click', function(){
            console.log('hidding revealable inputs');
            var target = $($(this).data('target')).parent();
            $('.js-revealable', target).hide();
        });
        */
    });

});
define('image_loader',[],function() {
    'use strict';

    var imageList = document.querySelectorAll('img[data-src]');
    const loadImages = (image) =>{
        image.setAttribute('src', image.getAttribute('data-src'));
        image.onload = () =>{
            image.removeAttribute('data-src');
        }
    };
    if ('IntersectionObserver' in window){
        const observer = new IntersectionObserver((items, observer) =>{
            items.forEach((item) =>{
                if(item.isIntersecting){
                    loadImages(item.target);
                    observer.unobserve(item.target);
                }
            })
        });
        imageList.forEach((img) =>{
            observer.observe(img);
        });
    }else{
        imageList.forEach((img) => {
            loadImages(img);
        });
    }
});
define('activities',['vendor/js.cookie', 'ajax_api'],function(Cookies, ajax_api) {
    'use strict';
    var user_session_key = "sessionid";
    var user_ref_key = "user_ref";
    const update_delay = 60000;
    var all_cookies;
    var timer ;
    var csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');

    var user_session = Cookies.get(user_session_key);
    var user_ref = Cookies.get(user_ref);
    var option = {
        type:'POST',
        method: 'POST',
        dataType: 'json',
        url : '/api/update-activity/',
        data : {'sessionid': user_session, 'user_ref': user_ref, 'csrfmiddlewaretoken': csrfmiddlewaretoken.value}
    }

    
    function update_user_activity(){
        all_cookies = Cookies.get();
        user_session = Cookies.get(user_session_key);
        /*ajax_api(option).then(function(response){
            console.info(response)
        }, function(reason){
            console.warn(reason);
        });
        */
    }
    function user_active(){
        clearTimeout(timer);
        timer = setTimeout(update_user_activity, update_delay);
    }

    

    if(window){
        window.onload = user_active;
        window.onkeypress = user_active;
        window.onclick = user_active;
        window.onscroll = user_active;
        window.onmousedown = user_active;
    }
});
requirejs.config({
    baseUrl :'/static/js/lib',
    paths:{
        vendor: '../vendor'
    }
});

requirejs(['accounts','cart_lyshop', 'attributes_api', 'ajax_api', 'components_api', 'checkout','wishlist', 'commons', 'image_loader', 'activities'], function(account, Cart, AttributeManager ,ajax_api, Component, Checkout, Wishlist){
    console.log("LyshopApp loaded ...");
    account.init();
    var cart = new Cart();
    var wishlist = new Wishlist();
    var attr_manager = new AttributeManager();
    cart.init();
    wishlist.init();
    attr_manager.init();
    Component.initComponent();
    var checkout = new Checkout(Component.tabs);
    checkout.init();
    
    console.log("JQuery version :", $().jquery);
});
define("main", function(){});

